<?php

/*
 * Copyright (C) 2010-2015 Anders Lövgren
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

namespace UUP\Html\Utility;

use UUP\Html\Base\Container;
use UUP\Html\Image;
use UUP\Html\Text\Cdata;

// 
// MessageBox icons URL:
// 
if (!defined('MESSAGEBOX_ICON_URL')) {
        define('MESSAGEBOX_ICON_URL', 'icons');
}
// 
// MessageBox standard titles:
// 
if (!defined('MESSAGEBOX_TITLE_HINT')) {
        define('MESSAGEBOX_TITLE_HINT', _('Hint'));
}
if (!defined('MESSAGEBOX_TITLE_SUCCESS')) {
        define('MESSAGEBOX_TITLE_SUCCESS', _('Success'));
}
if (!defined('MESSAGEBOX_TITLE_INFO')) {
        define('MESSAGEBOX_TITLE_INFO', _('Information'));
}
if (!defined('MESSAGEBOX_TITLE_WARN')) {
        define('MESSAGEBOX_TITLE_WARN', _('Warning'));
}
if (!defined('MESSAGEBOX_TITLE_ERROR')) {
        define('MESSAGEBOX_TITLE_ERROR', _('Error'));
}

/**
 * MessageBox class.
 *
 * This class defines a messagebox providing an standardized look-and-feel
 * for the displayed message. The messagebox is either used to display hinting,
 * success, information, warnings or error messages.
 *
 * The hint type is an extension to the standard messagebox types, and is
 * intended for display of user hints (like short usage tips).
 *
 * These three different use cases will all display the same messagebox:
 *
 * <code>
 * <?php
 * $title = "Greeting";
 * $text = "Hello world!";
 * $icon = "icons/custom/info.png";
 *
 * // 
 * // Using get/set methods:
 * // 
 * $messagebox = new MessageBox();
 * $messagebox->setIcon($icon);
 * $messagebox->setTitle($title);
 * $messagebox->setMessage($text);
 * $messagebox->display();
 *
 * // 
 * // Pass properties to constructor:
 * // 
 * $messagebox = new MessageBox(
 *     MessageBox::information,
 *     $text, $title, $icon);
 * $messagebox->display();
 *
 * // 
 * // Use static method:
 * // 
 * MessageBox::show(MessageBox::information, $text, $title, $icon);
 * ?>
 * </code>
 *
 * The HTML generated by code above will be:
 *
 * <code>
 * <div class="mbox info">
 *   <div class="mbox-head"><img src="icons/custom/info.png" alt=""/>Greeting</div>
 *   <div class="mbox-text">Hello world!</div>
 * </div>
 * </code>
 *
 * By default, the messagebox will be of information type. The type is either
 * set at construction time or later by calling setClass() on the messagebox
 * object.
 *
 * @package UUP
 * @subpackage Html
 *
 * @author Anders Lövgren (QNET/BMC CompDept)
 */
class MessageBox extends Container
{

        const HINT = "hint";
        const SUCCESS = "success";
        const INFORMATION = "info";
        const WARNING = "warn";
        const ERROR = "error";

        private $icon;
        private $head;
        private $text;

        /**
         * Constructor.
         * @param string $type Type of messagebox.
         * @param string $text The message string.
         * @param string|bool $title The title text or true to use default title. Pass null to exclude title message.
         * @param string|Image $icon The messagebox icon. Pass null to use default icon.
         */
        public function __construct($type = self::INFORMATION, $text = "", $title = true, $icon = null)
        {
                parent::__construct("div");
                parent::setClass(sprintf("mbox %s", $type));

                if (!isset($icon)) {                    // deduce icon from type
                        $icon = sprintf("%s/%s.png", MESSAGEBOX_ICON_URL, $type);
                }
                if (is_bool($title) && $title) {        // deduce title from type
                        $title = constant(sprintf("MESSAGEBOX_TITLE_%s", strtoupper($type)));
                }

                $this->setTitle($title);
                $this->setIcon($icon);
                $this->setMessage($text);

                parent::addElement($this);              // add output hook
        }

        /**
         * Factory function.
         * 
         * This is a convenient function that creates a messagebox object and
         * calls display() on it.
         * 
         * @param string $type Type of messagebox.
         * @param string $text The message string.
         * @param string|bool $title The title text or true to use default title. Pass null to exclude title message.
         * @param string|Image $icon The messagebox icon. Pass null to use default icon.
         */
        public static function show($type = self::INFORMATION, $text = "", $title = true, $icon = null)
        {
                $messagebox = new MessageBox($type, $text, $title, $icon);
                $messagebox->display();
        }

        /**
         * Set the messagebox icon.
         * @param string|Image $icon The messagebox icon.
         */
        public function setIcon($icon)
        {
                if (is_string($icon)) {
                        $this->icon = new Image($icon, "");
                } else {
                        $this->icon = $icon;
                }
        }

        /**
         * Set the messagebox title.
         * @param string $title The title text or null to exclude title message.
         */
        public function setTitle($text)
        {
                $this->head = $text;
        }

        /**
         * Set the message string.
         * @param string $text The message string.
         */
        public function setMessage($text)
        {
                $this->text = $text;
        }

        /**
         * Output the messagebox.
         *
         * This function should not be called direct. Instead, it is solely for
         * use by the parent class.
         */
        public function output()
        {
                if (is_string($this->head)) {
                        $this->head = new Cdata($this->head);
                }
                if (is_string($this->text)) {
                        $this->text = new Cdata($this->text);
                }
                if (isset($this->head)) {
                        $content = new Content();
                        $div = $content->addContent(new Container("div"));
                        $div->setClass("mbox-head");
                        $div->addElement($this->icon);
                        $div->addElement($this->head);
                        $div = $content->addContent(new Container("div"));
                        $div->setClass("mbox-text");
                        $div->addElement($this->text);
                        $content->output();
                } else {
                        $content = new Content();
                        $div = $content->addContent(new Container("div"));
                        $div->setClass("mbox-text");
                        $div->addElement($this->icon);
                        $div->addElement($this->text);
                        $content->output();
                }
        }

        /**
         * Call this function to display the messagebox.
         */
        public function display()
        {
                parent::output();
        }

}
