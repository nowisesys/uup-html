<?php

/*
 * Copyright (C) 2010-2015 Anders Lövgren
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

namespace UUP\Html\Utility;

use UUP\Html\Base\Container;
use UUP\Html\Div;
use UUP\Html\Image;
use UUP\Html\Span;
use UUP\Html\Text\Paragraph;

/**
 * MessageBox class.
 *
 * The message box class provides a standardized look-and-feel for end user
 * messages. The kind of messages displayed are typical error or information
 * messages. The hint type is an extension to the standard messagebox types, 
 * and is intended for display of user hints (like short usage tips).
 *
 * These three different use cases will all display the same messagebox:
 *
 * <code>
 * <?php
 * $title = "Greeting";
 * $text = "Hello world!";
 * $icon = "icons/info.png";
 * 
 * // 
 * // Using get/set methods:
 * // 
 * $messagebox = new MessageBox();
 * $messagebox->setIcon($icon);
 * $messagebox->setTitle($title);
 * $messagebox->setMessage($text);
 * $messagebox->output();
 *
 * // 
 * // Pass properties to constructor:
 * // 
 * $messagebox = new MessageBox(
 *    MessageBox::information,
 *    $icon, $title, $text);
 * $messagebox->output();
 * 
 * // 
 * // Use static method:
 * // 
 * MessageBox::show(MessageBox::information, $icon, $title, $text);
 * ?>
 * </code>
 *
 * The HTML code that is generated by the code above looks like this:
 *
 * <code>
 * <div class="info">
 *   <h3>Greeting</h3>
 *   <img src="icons/info.png" alt=""/>
 *   Hello world!
 * </div>
 * </code>
 *
 * By default, the messagebox will be of information type. The type is either
 * set at construction time or later by calling setClass() on the messagebox
 * object.
 * 
 * It's worth noticing that this is a container class. Thus, other elements
 * can be added to it. Such elements will be output within the messagebox
 * container div after the mesagesbox content is displayed.
 *
 * Due to a design decision, its not possible to modify the object state (like 
 * setting a new message) after output() been called once. However, its still
 * possible to add new elements to its parent container.
 * 
 * @package UUP
 * @subpackage Html
 *
 * @author Anders Lövgren (QNET/BMC CompDept)
 */
class MessageBox extends Container
{

        const hint = "hint";
        const success = "success";
        const information = "info";
        const warning = "warn";
        const error = "error";

        private $type;
        private $icon;
        private $title;
        private $text;
        private $content;

        /**
         * Constructor.
         *
         * The $type argument is one of the constants defined within this
         * class (i.e. MessageBox::warning).
         * 
         * The $icon argument is either an relative path or an URL, or an Image
         * object. If $icon is missing, then the icon type is determined from
         * the $type argument (if using one of the constants).
         * 
         * @param string $type Type of messagebox.
         * @param string|Image $icon The messagebox icon.
         * @param string $title The title text.
         * @param string $text The message string.
         */
        public function __construct($type = self::information, $icon = null, $title = null, $text = "")
        {
                // 
                // The main container.
                // 
                parent::__construct("div");
                parent::setClass("messagebox");

                // 
                // All object defined in this class goes into content.
                // 
                $this->content = parent::addElement(new Div());
                $this->content->setClass("content");

                if (!isset($icon)) {
                        $icon = sprintf("icons/nuvola/%s.png", $type);
                }

                $this->type = $type;
                $this->text = new Paragraph();
                $this->title = new Span();

                $this->setTitle($title);
                $this->setIcon($icon);
                $this->setMessage($text);

                $this->title->setClass("title");
                $this->icon->setClass("icon");
                $this->text->setClass($this->type);
        }

        /**
         * Factory function.
         * 
         * This is a convenient function that creates a messagebox object and
         * calls display() on it.
         * 
         * @param string $type Type of messagebox.
         * @param string|Image $icon The messagebox icon.
         * @param string $title The title text.
         * @param string $text The message string.
         */
        public static function show($type = self::information, $icon = null, $title = null, $text = "")
        {
                $messagebox = new MessageBox($type, $icon, $title, $text);
                $messagebox->output();
        }

        /**
         * Set the messagebox icon.
         * @param string|Image $icon The messagebox icon.
         */
        public function setIcon($icon)
        {
                if (is_string($icon)) {
                        $this->icon = new Image($icon, "");
                } else {
                        $this->icon = $icon;
                }
        }

        /**
         * Set the messagebox title.
         * @param string $title The title text.
         */
        public function setTitle($text)
        {
                $this->title->setText($text);
        }

        /**
         * Set the message string.
         * @param string $text The message string.
         */
        public function setMessage($text)
        {
                $this->text->setText($text);
        }

        /**
         * Output the messagebox.
         */
        public function output()
        {
                if ($this->content->count() == 0) {
                        $this->content->addElement($this->icon);
                        if (isset($this->title)) {
                                $this->content->addElement($this->title);
                        }
                        $this->content->addElement($this->text);
                }

                parent::output();
        }

}
